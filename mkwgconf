#!/usr/bin/python3

import argparse
import json
import pystache
import subprocess
import sys

# Get the arguments from the command line.

parser = argparse.ArgumentParser(
    description='Generate Wireguard configurations.')
parser.add_argument('--interface_conf', dest='iconf',
                    required=True,
                    help='interface configuration file')
parser.add_argument('--server_template',
                    required=True,
                    help='server template file')
parser.add_argument('--client_template',
                    required=True,
                    help='client template file')
args = parser.parse_args()

# Read in all the configuration and template files.

with open(args.iconf, 'r') as f:
    iconf = json.load(f)

with open(args.server_template, 'r') as f:
    SERVER_TEMPLATE = f.read()

with open(args.client_template, 'r') as f:
    CLIENT_TEMPLATE = f.read()

# Fill in any missing configuration values.
if 'public_address' not in iconf['server']:
    iconf['server']['public_address'] = subprocess.check_output(
        "curl ifconfig.io", shell=True).decode("utf-8").strip()

if 'private_key' not in iconf['server']:
    iconf['server']['private_key'] = subprocess.check_output(
        "wg genkey", shell=True).decode("utf-8").strip()

if 'ip_address' not in iconf['server']:
    iconf['server']['ip_address'] = iconf['ip_address_prefix'] + '.1'

iconf['server']['public_key'] = subprocess.check_output(
    "echo '%s' | wg pubkey" %
    iconf['server']['private_key'], shell=True).decode("utf-8").strip()

for client in iconf['clients']:
    if 'private_key' not in client:
        client['private_key'] = subprocess.check_output(
            "wg genkey",shell=True).decode("utf-8").strip()
    if 'ip_address' not in client:
        client['ip_address'] = (iconf['ip_address_prefix'] + '.' +
                                str(iconf['next_ip_address_suffix']))
        iconf['next_ip_address_suffix'] += 1
    client['public_key'] = subprocess.check_output(
        "echo '%s' | wg pubkey" % client['private_key'],
        shell=True).decode("utf-8").strip()

# Generate Wireguard configurations.

server_conf = open('target/%s.conf' % iconf['wg_interface'], 'w')
server_conf.write(pystache.render(SERVER_TEMPLATE, iconf))

for client in iconf['clients']:
    client_conf = open('target/%s_%s_geo.conf' % (iconf['wg_interface'],
                                           client['name']), 'w')
    client_conf.write(pystache.render(CLIENT_TEMPLATE,
                                      {'client': client,
                                       'server': iconf['server'],
                                       'allowed_ips': '0.0.0.0/0, ::/0'}))
    if 'intranet_ip_ranges' in iconf['server']:
        client_conf = open('target/%s_%s_access.conf' % (iconf['wg_interface'],
                                                  client['name']), 'w')
        client_conf.write(pystache.render(
            CLIENT_TEMPLATE,
            {'client': client,
             'server': iconf['server'],
             'allowed_ips': iconf['server']['intranet_ip_ranges']}))

print(json.dumps(iconf, indent=4))
